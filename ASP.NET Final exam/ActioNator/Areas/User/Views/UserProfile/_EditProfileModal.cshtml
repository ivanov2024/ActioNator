@model FinalExamUI.ViewModels.UserProfile.ProfileViewModel

<!-- Edit Profile Modal -->
<div id="editProfileModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-11/12 md:max-w-2xl shadow-lg rounded-md bg-white">
        <div class="flex justify-between items-center pb-3">
            <p class="text-2xl font-bold">Edit Profile</p>
            <button onclick="closeEditModal()" class="text-gray-400 hover:text-gray-500">
                <span class="text-2xl">&times;</span>
            </button>
        </div>
        
        <div class="mt-4">
            <form id="editProfileForm" method="post" enctype="multipart/form-data">
                <!-- Profile Picture Upload -->
                <div class="mb-6">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="profilePicture">
                        Profile Picture
                    </label>
                    <div class="flex items-center">
                        <img id="profileImagePreview" src="@Model.ProfilePictureUrl" alt="Profile" class="w-20 h-20 rounded-full object-cover mr-4">
                        <input type="file" id="profilePicture" name="profilePicture" accept="image/*" class="hidden" onchange="previewImage(this, 'profileImagePreview')">
                        <button type="button" onclick="document.getElementById('profilePicture').click()" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded">
                            Change
                        </button>
                    </div>
                </div>

                <!-- Cover Photo Upload -->
                <div class="mb-6">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="coverPhoto">
                        Cover Photo
                    </label>
                    <div class="relative h-40 bg-gray-200 rounded-lg overflow-hidden">
                        <img id="coverImagePreview" src="@Model.CoverPhotoUrl" alt="Cover" class="w-full h-full object-cover">
                        <input type="file" id="coverPhoto" name="coverPhoto" accept="image/*" class="hidden" onchange="previewImage(this, 'coverImagePreview')">
                        <button type="button" onclick="document.getElementById('coverPhoto').click()" class="absolute top-2 right-2 bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-70">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                            </svg>
                        </button>
                    </div>
                </div>

                <!-- Full Name -->
                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="fullName">
                        Full Name
                    </label>
                    <input type="text" id="fullName" name="fullName" value="@Model.FullName" 
                           class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                </div>

                <!-- Headline -->
                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="headline">
                        Headline
                    </label>
                    <input type="text" id="headline" name="headline" value="@Model.Headline" 
                           class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
                           placeholder="E.g., Software Developer at ActioNator">
                </div>

                <!-- Location -->
                <div class="mb-6">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="location">
                        Location
                    </label>
                    <input type="text" id="location" name="location" value="@Model.Location" 
                           class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
                           placeholder="E.g., New York, NY">
                </div>

                <!-- Form Actions -->
                <div class="flex items-center justify-end pt-4 border-t border-gray-200">
                    <button type="button" onclick="closeEditModal()" class="bg-white hover:bg-gray-100 text-gray-700 font-medium py-2 px-4 border border-gray-300 rounded shadow-sm mr-2">
                        Cancel
                    </button>
                    <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded shadow-sm">
                        Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- JavaScript for the modal -->
<script>
    // Open the modal
    function openEditModal() {
        document.getElementById('editProfileModal').classList.remove('hidden');
        document.body.classList.add('overflow-hidden');
    }

    // Close the modal
    function closeEditModal() {
        document.getElementById('editProfileModal').classList.add('hidden');
        document.body.classList.remove('overflow-hidden');
    }

    // Preview image before upload
    function previewImage(input, previewId) {
        const preview = document.getElementById(previewId);
        const file = input.files[0];
        const reader = new FileReader();

        reader.onloadend = function() {
            preview.src = reader.result;
        }

        if (file) {
            reader.readAsDataURL(file);
        }
    }

    // Handle form submission
    document.getElementById('editProfileForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        
        try {
            const response = await fetch('/User/UserProfile/UpdateProfile', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            });

            if (response.ok) {
                // Reload the page to see changes
                window.location.reload();
            } else {
                alert('Error updating profile. Please try again.');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('An error occurred while updating your profile.');
        }
    });

    // Close modal when clicking outside of it
    window.onclick = function(event) {
        const modal = document.getElementById('editProfileModal');
        if (event.target === modal) {
            closeEditModal();
        }
    }
</script>
