@* Add Journal Entry Modal - Custom implementation for Journal feature *@
@model ActioNator.ViewModels.Journal.JournalEntryViewModel

<div 
    x-data="journalModal()"
    @@open-journal-modal.window="openModal()"
    @@close-journal-modal.window="closeModal()"
    @@journal-edit-mode.window="applyMode($event)"
    x-cloak
>
    <!-- Backdrop with improved blur effect -->
    <div
        class="fixed inset-0 bg-gray-900/75 backdrop-blur-sm z-40"
        x-show="showModal"
        x-transition:enter="transition ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="transition ease-in duration-200"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
        x-ref="backdrop"
        x-cloak
        @@click="closeModal()"
    ></div>
    
    <!-- Modal Container with improved centering and max-width -->
    <div
        class="fixed inset-0 flex items-start justify-center p-4 z-50 mt-16 sm:mt-20 md:mt-24 lg:mt-28"
        x-show="showModal"
        x-transition:enter="transition ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="transition ease-in duration-200"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
        x-cloak
        @@keydown.escape.window="closeModal()"
        @@click="closeModal()"
        x-ref="modalContainer"
    >
        <!-- Modal Content with improved styling and animations -->
        <div
            class="bg-white rounded-lg shadow-xl w-full mx-auto transform transition-all max-w-[95%] sm:max-w-lg md:max-w-xl lg:max-w-md xl:max-w-lg relative overflow-y-auto max-h-[90vh]"
            x-show="showModal"
            x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start="opacity-0 transform scale-95 translate-y-4"
            x-transition:enter-end="opacity-100 transform scale-100 translate-y-0"
            x-transition:leave="transition ease-in duration-200"
            x-transition:leave-start="opacity-100 transform scale-100 translate-y-0"
            x-transition:leave-end="opacity-0 transform scale-95 translate-y-4"
            @@click.stop
            x-ref="modalContent"
        >
            <!-- Modal Header with purple background and icon -->
            <div class="bg-indigo-600 px-4 sm:px-6 md:px-8 py-4 sm:py-5 flex items-center justify-between border-b border-indigo-700">
                <div class="flex items-center space-x-2">
                    <svg class="h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                    </svg>
                    <h3 class="text-lg font-medium text-white" x-text="isEditMode ? 'Edit Journal Entry' : 'New Journal Entry'"></h3>
                </div>
                <!-- Close button (X) in the top right corner -->
                <button 
                    type="button" 
                    class="text-white/80 hover:text-white focus:outline-none focus:text-white transition ease-in-out duration-150" 
                    @@click="closeModal()"
                    aria-label="Close"
                >
                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            
            <!-- Modal Subheader with description -->
            <div class="px-4 sm:px-8 md:px-12 pt-4 sm:pt-6 pb-2 sm:pb-3">
                <p class="text-sm text-gray-600" x-text="isEditMode ? 'Update your journal entry details below.' : 'Create a new journal entry to record your thoughts.'"></p>
            </div>
                
            <!-- Form Content -->
            <form id="journalEntryForm" class="px-4 sm:px-8 md:px-12 pt-3 sm:pt-4 pb-6 sm:pb-8" x-on:submit.prevent="validateForm() && saveEntry()">
                <input asp-for="Id" type="hidden" x-model="currentEntry.id" />
                <input asp-for="CreatedAt" type="hidden" x-model="currentEntry.createdAt" />
                @Html.AntiForgeryToken()
                <div asp-validation-summary="ModelOnly" class="text-red-600 text-sm mb-3"></div>
                
                <!-- Title Field -->
                <div class="mb-6" x-data="{
                    get titleLength() { return currentEntry.title ? currentEntry.title.length : 0; },
                    get isTitleValid() { return this.titleLength >= 3 && this.titleLength <= 20; }
                }">
                    <label asp-for="Title" class="block text-sm font-medium text-gray-700 mb-2">Title <span class="text-red-500">*</span></label>
                    <div class="relative rounded-md shadow-sm">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                            </svg>
                        </div>
                        <input asp-for="Title"
                            x-model="currentEntry.title"
                            class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-base"
                            :class="{'border-red-300 focus:ring-red-500 focus:border-red-500': !isTitleValid && validationAttempted}"
                            placeholder="What's on your mind?"
                            style="white-space: normal; overflow-wrap: break-word;" />
                    </div>
                    <span asp-validation-for="Title" class="mt-1 text-sm text-red-600"></span>
                    <div x-show="!isTitleValid && validationAttempted" class="mt-1 text-sm text-red-600">Title must be between 3 and 20 characters.</div>
                </div>

                <!-- Mood Tag Field -->
                <div class="mb-6" x-data="{
                    get moodLength() { return currentEntry.mood ? currentEntry.mood.length : 0; },
                    get isMoodValid() { return this.moodLength >= 1 && this.moodLength <= 50; }
                }">
                    <label asp-for="MoodTag" class="block text-sm font-medium text-gray-700 mb-2">Mood Tag <span class="text-red-500">*</span></label>
                    <div class="relative rounded-md shadow-sm">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <span class="text-gray-500">#</span>
                        </div>
                        <input asp-for="MoodTag"
                            x-model="currentEntry.mood"
                            class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-base"
                            :class="{'border-red-300 focus:ring-red-500 focus:border-red-500': !isMoodValid && validationAttempted}"
                            placeholder="How are you feeling? (e.g., Happy, Stressed, Calm)"
                            style="white-space: normal; overflow-wrap: break-word;" />
                    </div>
                    <span asp-validation-for="MoodTag" class="mt-1 text-sm text-red-600"></span>
                    <div x-show="!isMoodValid && validationAttempted" class="mt-1 text-sm text-red-600">Mood tag must be 50 characters or less.</div>
                </div>
                
                <!-- Content Field -->
                <div class="mb-4" x-data="{
                    get contentLength() { return currentEntry.content ? currentEntry.content.length : 0; },
                    get isContentValid() { return this.contentLength >= 1 && this.contentLength <= 150; }
                }">
                    <label asp-for="Content" class="block text-sm font-medium text-gray-700 mb-2">Your Thoughts <span class="text-red-500">*</span></label>
                    <div class="relative">
                        <div class="absolute top-3 left-3 flex items-start pointer-events-none text-gray-400">
                            <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7" />
                            </svg>
                        </div>
                        <textarea asp-for="Content"
                            x-model="currentEntry.content"
                            placeholder="Write your journal entry here..."
                            style="white-space: normal; overflow-wrap: break-word;"
                            rows="5"
                            class="block w-full pl-10 pr-4 py-3 rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 transition duration-150 ease-in-out text-base"
                            :class="{'border-red-500 focus:border-red-500 focus:ring-red-200': !isContentValid && validationAttempted}"></textarea>
                        <div class="absolute bottom-2 right-2 text-xs font-medium px-2 py-1 rounded-full bg-gray-100 text-gray-600">
                            <span x-text="contentLength"></span> characters
                        </div>
                    </div>
                    <span asp-validation-for="Content" class="mt-1 text-sm text-red-600"></span>
                    <div x-show="!isContentValid && validationAttempted" class="mt-1 text-sm text-red-600">Content must not exceed 150 characters.</div>
                </div>
            </form>
            
            <!-- Modal Footer with improved button styling-->
            <div class="bg-gray-50 px-4 sm:px-8 md:px-12 py-4 sm:py-6 flex flex-col sm:flex-row sm:justify-end sm:space-x-4 space-y-3 sm:space-y-0 border-t border-gray-200">
                <button
                    type="button"
                    @@click="closeModal()"
                    class="w-full sm:w-auto px-4 sm:px-6 py-2 sm:py-2.5 bg-white text-gray-700 text-sm font-medium rounded-lg border border-gray-300 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out flex items-center justify-center"
                >
                    <svg class="h-4 w-4 mr-1.5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                    Cancel
                </button>
                <button
                    type="button"
                    @@click="validateForm() && saveEntry()"
                    class="w-full sm:w-auto px-4 sm:px-6 py-2 sm:py-2.5 bg-indigo-600 text-white text-sm font-medium rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out flex items-center justify-center"
                >
                    <svg class="h-4 w-4 mr-1.5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                    <span x-show="!isEditMode">Save</span>
                    <span x-show="isEditMode">Update</span>
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    // Register a dedicated Alpine component for the Journal modal
    document.addEventListener('alpine:init', () => {
        console.log('Alpine initialized for Journal Entry Modal');
        
        // Register the journalModal component
        Alpine.data('journalModal', () => ({
            showModal: false,
            isEditMode: false,
            isClosing: false,
            currentEntry: {
                id: '',
                title: '',
                content: '',
                mood: ''
            },
            validationAttempted: false,
            validationErrors: {},
            
            init() {
                console.log('Journal modal component initialized');
                
                // Add extra logging to debug event flow
                console.log('Journal modal component registered and listening for events');
            },
            
            // Apply incoming mode and entry state from event detail
            applyMode(e) {
                try {
                    console.log('Journal modal received journal-edit-mode event', e?.detail);
                    const detail = e && e.detail ? e.detail : {};
                    this.isEditMode = !!detail.isEditMode;
                    const src = detail.entry || {};
                    this.currentEntry = {
                        id: src.id || '',
                        title: src.title || '',
                        content: src.content || '',
                        mood: src.mood || src.moodTag || '',
                        createdAt: src.createdAt || this.currentEntry.createdAt || new Date().toISOString()
                    };
                    this.validationAttempted = false;
                    this.validationErrors = {};
                } catch (err) {
                    console.warn('Failed to apply journal-edit-mode detail:', err);
                }
            },
            
            openModal() {
                console.log('Journal modal opening');
                // Apply any persisted state from the caller before opening
                try {
                    const st = window.__journalModalState;
                    if (st) {
                        console.log('Applying persisted modal state before open:', st);
                        this.isEditMode = !!st.isEditMode;
                        const src = st.entry || {};
                        this.currentEntry = {
                            id: src.id || '',
                            title: src.title || '',
                            content: src.content || '',
                            mood: src.mood || src.moodTag || '',
                            createdAt: src.createdAt || this.currentEntry.createdAt || new Date().toISOString()
                        };
                        this.validationAttempted = false;
                        this.validationErrors = {};
                    }
                } catch (e) {
                    console.warn('Failed to apply persisted modal state:', e);
                }
                
                // Reset any previous state to avoid animation conflicts
                if (this.$refs.modalContent) {
                    this.$refs.modalContent.style.display = '';
                }
                if (this.$refs.backdrop) {
                    this.$refs.backdrop.style.display = '';
                }
                
                this.showModal = true;
                document.body.classList.add('overflow-hidden');
                
                // Ensure any dropdowns are properly contained within the modal
                this.$nextTick(() => {
                    const dropdowns = this.$refs.modalContent?.querySelectorAll('.dropdown-content');
                    if (dropdowns) {
                        dropdowns.forEach(dropdown => {
                            dropdown.classList.add('max-h-60', 'overflow-y-auto');
                        });
                    }
                });
            },
            
            closeModal(event) {
                // Only close if clicking directly on the backdrop or explicitly calling closeModal()
                if (!event || event.target === event.currentTarget) {
                    console.log('Journal modal closing');
                    
                    // Use a proper animation sequence to prevent flickering
                    // First mark as closing but don't hide yet
                    this.isClosing = true;
                    
                    // Wait for animation to complete before hiding
                    setTimeout(() => {
                        this.showModal = false;
                        this.isClosing = false;
                        document.body.classList.remove('overflow-hidden');
                    }, 250); // Match this with the duration in the transition classes
                }
            },
            
            resetForm() {
                this.currentEntry = {
                    id: '',
                    title: '',
                    content: '',
                    mood: ''
                };
                this.validationAttempted = false;
                this.validationErrors = {};
            },

            // Client-side validation matching server-side constraints
            validateForm() {
                this.validationAttempted = true;
                const title = this.currentEntry.title || '';
                const content = this.currentEntry.content || '';
                const mood = this.currentEntry.mood || '';
                if (title.length < 3 || title.length > 20) return false;
                if (content.length < 1 || content.length > 150) return false;
                if (mood.length < 1 || mood.length > 50) return false;
                return true;
            },

            // Save entry via AJAX to /User/Journal/Save
            async saveEntry() {
                try {
                    const tokenEl = document.querySelector('input[name="__RequestVerificationToken"]');
                    const token = tokenEl ? tokenEl.value : '';
                    const payload = {
                        Id: this.isEditMode && this.currentEntry.id ? this.currentEntry.id : '00000000-0000-0000-0000-000000000000',
                        Title: this.currentEntry.title,
                        Content: this.currentEntry.content,
                        MoodTag: this.currentEntry.mood,
                        __RequestVerificationToken: token
                    };
                    const res = await fetch('/User/Journal/Save', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest',
                            'X-CSRF-TOKEN': token
                        },
                        credentials: 'same-origin',
                        body: JSON.stringify(payload)
                    });
                    if (!res.ok) {
                        let msg = 'Failed to save journal entry';
                        try {
                            const ct = res.headers.get('content-type');
                            if (ct && ct.includes('application/json')) {
                                const data = await res.json();
                                msg = data.error || (Array.isArray(data.errors) ? data.errors.join('\n') : msg);
                            } else {
                                msg = await res.text();
                            }
                        } catch {}
                        throw new Error(msg);
                    }
                    const data = await res.json();
                    const actionText = this.isEditMode ? 'updated' : 'saved';
                    if (window.showToast) showToast('success', data.message || `Journal entry ${actionText} successfully!`);
                    // Close modal and reset
                    this.closeModal();
                    this.resetForm();
                    // Inform pager to reload
                    window.dispatchEvent(new CustomEvent('journal-entries-changed', { detail: { action: this.isEditMode ? 'update' : 'create' } }));
                } catch (err) {
                    console.error('Save failed:', err);
                    if (window.showToast) showToast('error', err.message || 'An error occurred while saving the entry');
                }
            }
        }));
    });
</script>
