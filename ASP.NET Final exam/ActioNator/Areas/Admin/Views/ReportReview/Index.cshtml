@model ActioNator.ViewModels.Reports.ReportReviewPageViewModel
@{
    ViewData["Title"] = "Report Review";
    Layout = "_Layout";
}

<div class="container-fluid py-4">
    <h1 class="mb-4">Report Review</h1>

    <ul class="nav nav-tabs mb-4" id="reportTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="posts-tab" data-bs-toggle="tab" data-bs-target="#posts" 
                    type="button" role="tab" aria-controls="posts" aria-selected="true">
                Reported Posts <span class="badge bg-danger ms-2">@Model.ReportedPosts.Count</span>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="comments-tab" data-bs-toggle="tab" data-bs-target="#comments" 
                    type="button" role="tab" aria-controls="comments" aria-selected="false">
                Reported Comments <span class="badge bg-danger ms-2">@Model.ReportedComments.Count</span>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="users-tab" data-bs-toggle="tab" data-bs-target="#users" 
                    type="button" role="tab" aria-controls="users" aria-selected="false">
                Reported Users <span class="badge bg-danger ms-2">@Model.ReportedUsers.Count</span>
            </button>
        </li>
    </ul>

    <div class="tab-content" id="reportTabsContent">
        <div class="tab-pane fade show active" id="posts" role="tabpanel" aria-labelledby="posts-tab">
            @if (!Model.ReportedPosts.Any())
            {
                <div class="alert alert-info">
                    No reported posts found.
                </div>
            }
            else
            {
                <div class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4">
                    @foreach (var post in Model.ReportedPosts)
                    {
                        <div class="col">
                            @await Html.PartialAsync("_ReportedPostPartial", post)
                        </div>
                    }
                </div>
            }
        </div>
        <div class="tab-pane fade" id="comments" role="tabpanel" aria-labelledby="comments-tab">
            @if (!Model.ReportedComments.Any())
            {
                <div class="alert alert-info">
                    No reported comments found.
                </div>
            }
            else
            {
                <div class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4">
                    @foreach (var comment in Model.ReportedComments)
                    {
                        <div class="col">
                            @await Html.PartialAsync("_ReportedCommentPartial", comment)
                        </div>
                    }
                </div>
            }
        </div>
        <div class="tab-pane fade" id="users" role="tabpanel" aria-labelledby="users-tab">
            @if (Model.ReportedUsers == null || !Model.ReportedUsers.Any())
            {
                <div class="alert alert-info">
                    No reported users found.
                </div>
            }
            else
            {
                <div class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4">
                    @foreach (var user in Model.ReportedUsers)
                    {
                        <div class="col">
                            @await Html.PartialAsync("_ReportedUserPartial", user)
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@* Shared UI Partials *@
@await Html.PartialAsync("~/Views/Shared/_ToastPartial.cshtml")
@await Html.PartialAsync("~/Views/Shared/_ModalPartial.cshtml")

@section Scripts {
    <script>
        // Helper to show toasts via shared partial without clobbering its global name
        function notifyToast(isSuccessOrType, message) {
            if (typeof window.showToast !== 'function') {
                console.warn('Toast system not initialized');
                return;
            }
            if (typeof isSuccessOrType === 'boolean') {
                window.showToast(isSuccessOrType ? 'success' : 'error', message);
            } else {
                window.showToast(isSuccessOrType, message);
            }
        }
        
        // Delete functions
        function deletePost(id) {
            openModal({
                type: 'delete',
                title: 'Delete Post',
                message: 'Are you sure you want to delete this post? This action cannot be undone.',
                confirmText: 'Delete',
                cancelText: 'Cancel',
                onConfirm: function () {
                    $.ajax({
                        url: '@Url.Action("DeletePost", "ReportReview")',
                        type: 'POST',
                        data: { id: id, __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() },
                        success: function(result) {
                            if (result.success) {
                                notifyToast('success', 'Post deleted successfully.');
                                // Remove the card from the UI
                                $('#post-' + id).fadeOut(function() {
                                    $(this).remove();
                                    // Check if there are no more posts
                                    if ($('#posts .card').length === 0) {
                                        $('#posts').html('<div class="alert alert-info">No reported posts found.</div>');
                                    }
                                });
                            } else {
                                notifyToast('error', 'Failed to delete post.');
                            }
                        },
                        error: function() {
                            notifyToast('error', 'An error occurred while deleting the post.');
                        }
                    });
                }
            });
        }
        
        function deleteComment(id) {
            openModal({
                type: 'delete',
                title: 'Delete Comment',
                message: 'Are you sure you want to delete this comment? This action cannot be undone.',
                confirmText: 'Delete',
                cancelText: 'Cancel',
                onConfirm: function () {
                    $.ajax({
                        url: '@Url.Action("DeleteComment", "ReportReview")',
                        type: 'POST',
                        data: { id: id, __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() },
                        success: function(result) {
                            if (result.success) {
                                notifyToast('success', 'Comment deleted successfully.');
                                // Remove the card from the UI
                                $('#comment-' + id).fadeOut(function() {
                                    $(this).remove();
                                    // Check if there are no more comments
                                    if ($('#comments .card').length === 0) {
                                        $('#comments').html('<div class="alert alert-info">No reported comments found.</div>');
                                    }
                                });
                            } else {
                                notifyToast('error', 'Failed to delete comment.');
                            }
                        },
                        error: function() {
                            notifyToast('error', 'An error occurred while deleting the comment.');
                        }
                    });
                }
            });
        }

        // Dismiss report functions
        function dismissPostReport(id) {
            $.ajax({
                url: '@Url.Action("DismissPostReport", "ReportReview")',
                type: 'POST',
                data: { id: id, __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() },
                success: function(result) {
                    if (result.success) {
                        notifyToast(true, 'Post report dismissed successfully.');
                        // Remove the card from the UI
                        $('#post-' + id).fadeOut(function() {
                            $(this).remove();
                            // Check if there are no more posts
                            if ($('#posts .card').length === 0) {
                                $('#posts').html('<div class="alert alert-info">No reported posts found.</div>');
                            }
                        });
                    } else {
                        notifyToast(false, 'Failed to dismiss post report.');
                    }
                },
                error: function() {
                    notifyToast(false, 'An error occurred while dismissing the post report.');
                }
            });
        }
        
        function dismissCommentReport(id) {
            $.ajax({
                url: '@Url.Action("DismissCommentReport", "ReportReview")',
                type: 'POST',
                data: { id: id, __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() },
                success: function(result) {
                    if (result.success) {
                        notifyToast(true, 'Comment report dismissed successfully.');
                        // Remove the card from the UI
                        $('#comment-' + id).fadeOut(function() {
                            $(this).remove();
                            // Check if there are no more comments
                            if ($('#comments .card').length === 0) {
                                $('#comments').html('<div class="alert alert-info">No reported comments found.</div>');
                            }
                        });
                    } else {
                        notifyToast(false, 'Failed to dismiss comment report.');
                    }
                },
                error: function() {
                    notifyToast(false, 'An error occurred while dismissing the comment report.');
                }
            });
        }

        // User actions
        function deleteUser(id) {
            openModal({
                type: 'delete',
                title: 'Delete User',
                message: 'Are you sure you want to delete this user? This action cannot be undone.',
                confirmText: 'Delete',
                cancelText: 'Cancel',
                onConfirm: function () {
                    $.ajax({
                        url: '@Url.Action("DeleteUser", "ReportReview")',
                        type: 'POST',
                        data: { id: id, __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() },
                        success: function(result) {
                            if (result.success) {
                                notifyToast('success', 'User deleted successfully.');
                                $('#user-' + id).fadeOut(function() {
                                    $(this).remove();
                                    if ($('#users .card').length === 0) {
                                        $('#users').html('<div class="alert alert-info">No reported users found.</div>');
                                    }
                                });
                            } else {
                                notifyToast('error', 'Failed to delete user.');
                            }
                        },
                        error: function() {
                            notifyToast('error', 'An error occurred while deleting the user.');
                        }
                    });
                }
            });
        }

        function dismissUserReport(id) {
            $.ajax({
                url: '@Url.Action("DismissUserReport", "ReportReview")',
                type: 'POST',
                data: { id: id, __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() },
                success: function(result) {
                    if (result.success) {
                        notifyToast(true, 'User report dismissed successfully.');
                        $('#user-' + id).fadeOut(function() {
                            $(this).remove();
                            if ($('#users .card').length === 0) {
                                $('#users').html('<div class="alert alert-info">No reported users found.</div>');
                            }
                        });
                    } else {
                        notifyToast(false, 'Failed to dismiss user report.');
                    }
                },
                error: function() {
                    notifyToast(false, 'An error occurred while dismissing the user report.');
                }
            });
        }
    </script>
    
    @* Add anti-forgery token *@
    @Html.AntiForgeryToken()
}
