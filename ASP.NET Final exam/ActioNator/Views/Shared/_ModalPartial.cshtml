@* Reusable Modal Component *@

<div x-data="modal" x-cloak>
    <!-- Modal Backdrop -->
    <div id="modalContainer" class="fixed inset-0 bg-black bg-opacity-50 z-40"
         x-show="isOpen"
         x-transition:enter="transition ease-out duration-300"
         x-transition:enter-start="opacity-0"
         x-transition:enter-end="opacity-100"
         x-transition:leave="transition ease-in duration-200"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         @@click ="close()">
    </div>

    <!-- Modal Content -->
    <div class="fixed inset-0 z-50 overflow-y-auto"
         x-show="isOpen"
         @@click ="close()">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-auto overflow-hidden"
                 x-show="isOpen"
                 x-transition:enter="transition ease-out duration-300"
                 x-transition:enter-start="opacity-0 transform scale-95"
                 x-transition:enter-end="opacity-100 transform scale-100"
                 x-transition:leave="transition ease-in duration-200"
                 x-transition:leave-start="opacity-100 transform scale-100"
                 x-transition:leave-end="opacity-0 transform scale-95"
                 @@click.stop>

                <!-- Modal Header -->
                <div class="px-6 py-4 border-b flex justify-between items-center"
                     :class="{
                        'bg-yellow-50 border-yellow-100': type === 'report',
                        'bg-red-50 border-red-100': type === 'delete'
                    }">
                    <h3 class="text-lg font-medium"
                        :class="{
                            'text-yellow-800': type === 'report',
                            'text-red-800': type === 'delete'
                        }"
                        x-text="title">
                    </h3>
                    <button @@click ="close()"
                            class="text-gray-400 hover:text-gray-600 focus:outline-none">
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                        </svg>
                    </button>
                </div>

                <!-- Modal Body -->
                <div class="px-6 py-4">
                    <p class="text-gray-700" x-text="message"></p>
                </div>

                <!-- Modal Footer -->
                <div class="px-6 py-4 bg-gray-50 flex justify-end space-x-3">
                    <button class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition"
                            @@click ="close()"
                            x-text="cancelText">
                    </button>

                    <button class="px-4 py-2 text-white rounded transition"
                            :class="{
                            'bg-yellow-500 hover:bg-yellow-600': type === 'report',
                            'bg-red-500 hover:bg-red-600': type === 'delete'
                        }"
                            @@click ="confirm()"
                            x-text="confirmText">
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Create a global object to store modal reference
    window.modalSystem = {
        instance: null,
        initialized: false
    };
    
    document.addEventListener('alpine:init', () => {
        Alpine.data('modal', () => {
            const modalData = {
                isOpen: false,
                type: 'report', // 'report' or 'delete'
                title: '',
                message: '',
                confirmText: 'Confirm',
                cancelText: 'Cancel',

                init() {
                    // Store reference to this component instance globally
                    window.modalSystem.instance = this;
                    window.modalSystem.initialized = true;
                    console.log('Modal component initialized and stored globally');
                    
                    // Dispatch an event to notify that the modal is ready
                    setTimeout(() => {
                        window.dispatchEvent(new CustomEvent('modal-ready', {
                            detail: { modalInstance: this }
                        }));
                        console.log('Modal ready event dispatched');
                    }, 100);
                },

                close() {
                    this.isOpen = false;
                    document.body.style.overflow = '';
                },

                confirm() {
                    // For delete operations, call the global deletion handler
                    if (this.type === 'delete') {
                        try {
                            // Call the global post deletion function
                            if (typeof window.handlePostDeletion === 'function') {
                                window.handlePostDeletion();
                                console.log('Called handlePostDeletion from modal');
                            } else {
                                console.error('handlePostDeletion function not found');
                            }
                        } catch (error) {
                            console.error('Error in post deletion:', error);
                        }
                    } else {
                        // For non-delete operations, use the event system
                        window.dispatchEvent(new CustomEvent('modal-confirmed', {
                            detail: {
                                type: this.type,
                                title: this.title
                            }
                        }));
                        
                        // Show toast for report type
                        if (this.type === 'report') {
                            window.dispatchEvent(new CustomEvent('show-toast', {
                                detail: {
                                    type: 'success',
                                    message: 'Content has been reported successfully.'
                                }
                            }));
                        }
                    }
                    
                    this.close();
                }
            };
            return modalData;
        });
    });

    // Helper function to open modal from anywhere in the application
    window.openModal = function(config) {
        try {
            // Check if modal system is initialized
            if (window.modalSystem && window.modalSystem.initialized && window.modalSystem.instance) {
                const modalInstance = window.modalSystem.instance;
                modalInstance.type = config.type || 'report';
                modalInstance.title = config.title || 'Confirmation';
                modalInstance.message = config.message || 'Are you sure?';
                modalInstance.confirmText = config.confirmText || 'Confirm';
                modalInstance.cancelText = config.cancelText || 'Cancel';
                modalInstance.isOpen = true;
                document.body.style.overflow = 'hidden';
                console.log('Modal opened successfully using global reference');
                return;
            }

            // Fallback: try to find the modal element directly
            const modalElement = document.querySelector('[x-data="modal"]');
            if (modalElement && modalElement.__x && modalElement.__x.$data) {
                const modalData = modalElement.__x.$data;
                modalData.type = config.type || 'report';
                modalData.title = config.title || 'Confirmation';
                modalData.message = config.message || 'Are you sure?';
                modalData.confirmText = config.confirmText || 'Confirm';
                modalData.cancelText = config.cancelText || 'Cancel';
                modalData.isOpen = true;
                document.body.style.overflow = 'hidden';
                console.log('Modal opened using direct element reference');
                return;
            }
            
            console.error('Modal Alpine component not found or not initialized');
        } catch (error) {
            console.error('Error opening modal:', error);
        }
    };
</script>

<style>
    [x-cloak] {
        display: none !important;
    }
</style>

<!-- Direct modal initialization script -->
<script>
    // This script runs after the page is loaded to ensure the modal is accessible
    document.addEventListener('DOMContentLoaded', function() {
        // Wait for Alpine.js to initialize
        setTimeout(function() {
            try {
                // Store direct reference to the modal element
                const modalElement = document.querySelector('[x-data="modal"]');
                if (modalElement && modalElement.__x && modalElement.__x.$data) {
                    // Make the modal directly accessible from the window object
                    window.directModalAccess = modalElement.__x.$data;
                    console.log('Direct modal access established');
                    
                    // Define a reliable openModal function that doesn't rely on events
                    window.openModalDirect = function(config) {
                        try {
                            if (window.directModalAccess) {
                                window.directModalAccess.type = config.type || 'report';
                                window.directModalAccess.title = config.title || 'Confirmation';
                                window.directModalAccess.message = config.message || 'Are you sure?';
                                window.directModalAccess.confirmText = config.confirmText || 'Confirm';
                                window.directModalAccess.cancelText = config.cancelText || 'Cancel';
                                window.directModalAccess.isOpen = true;
                                document.body.style.overflow = 'hidden';
                                console.log('Modal opened directly');
                                return true;
                            }
                            return false;
                        } catch (error) {
                            console.error('Error in openModalDirect:', error);
                            return false;
                        }
                    };
                    
                    // Override the existing openModal function with our more reliable version
                    const originalOpenModal = window.openModal;
                    window.openModal = function(config) {
                        // Try the direct access first
                        if (window.openModalDirect(config)) {
                            return;
                        }
                        
                        // Fall back to the original function if direct access fails
                        if (typeof originalOpenModal === 'function') {
                            originalOpenModal(config);
                        } else {
                            console.error('No modal opening method available');
                        }
                    };
                    
                    // Dispatch event that modal is ready
                    window.dispatchEvent(new CustomEvent('modal-fully-ready'));
                }
            } catch (error) {
                console.error('Error in direct modal initialization:', error);
            }
        }, 500);
    });
</script>
