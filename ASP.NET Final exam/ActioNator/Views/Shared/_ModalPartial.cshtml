@* Reusable Modal Component *@

<div x-data="modal" x-cloak>
    <!-- Modal Backdrop -->
    <div class="fixed inset-0 bg-black bg-opacity-50 z-40"
         x-show="isOpen"
         x-transition:enter="transition ease-out duration-300"
         x-transition:enter-start="opacity-0"
         x-transition:enter-end="opacity-100"
         x-transition:leave="transition ease-in duration-200"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         @@click ="close()">
    </div>

    <!-- Modal Content -->
    <div class="fixed inset-0 z-50 overflow-y-auto"
         x-show="isOpen"
         @@click ="close()">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-auto overflow-hidden"
                 x-show="isOpen"
                 x-transition:enter="transition ease-out duration-300"
                 x-transition:enter-start="opacity-0 transform scale-95"
                 x-transition:enter-end="opacity-100 transform scale-100"
                 x-transition:leave="transition ease-in duration-200"
                 x-transition:leave-start="opacity-100 transform scale-100"
                 x-transition:leave-end="opacity-0 transform scale-95"
                 @@click.stop>

                <!-- Modal Header -->
                <div class="px-6 py-4 border-b flex justify-between items-center"
                     :class="{
                        'bg-yellow-50 border-yellow-100': type === 'report',
                        'bg-red-50 border-red-100': type === 'delete'
                    }">
                    <h3 class="text-lg font-medium"
                        :class="{
                            'text-yellow-800': type === 'report',
                            'text-red-800': type === 'delete'
                        }"
                        x-text="title">
                    </h3>
                    <button @@click ="close()"
                            class="text-gray-400 hover:text-gray-600 focus:outline-none">
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                        </svg>
                    </button>
                </div>

                <!-- Modal Body -->
                <div class="px-6 py-4">
                    <p class="text-gray-700" x-text="message"></p>
                </div>

                <!-- Modal Footer -->
                <div class="px-6 py-4 bg-gray-50 flex justify-end space-x-3">
                    <button class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition"
                            @@click ="close()"
                            x-text="cancelText">
                    </button>

                    <button class="px-4 py-2 text-white rounded transition"
                            :class="{
                            'bg-yellow-500 hover:bg-yellow-600': type === 'report',
                            'bg-red-500 hover:bg-red-600': type === 'delete'
                        }"
                            @@click ="confirm()"
                            x-text="confirmText">
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('modal', () => ({
            isOpen: false,
            type: 'report', // 'report' or 'delete'
            title: '',
            message: '',
            confirmText: 'Confirm',
            cancelText: 'Cancel',

            open(config) {
                this.type = config.type || 'report';
                this.title = config.title || 'Confirmation';
                this.message = config.message || 'Are you sure?';
                this.confirmText = config.confirmText || 'Confirm';
                this.cancelText = config.cancelText || 'Cancel';
                this.isOpen = true;
                document.body.style.overflow = 'hidden';
            },

            close() {
                this.isOpen = false;
                document.body.style.overflow = '';
            },

            confirm() {
                // Emit custom event with modal type
                window.dispatchEvent(new CustomEvent('modal-confirmed', {
                    detail: {
                        type: this.type,
                        title: this.title
                    }
                }));

                // Show appropriate toast based on modal type
                if (this.type === 'report') {
                    window.dispatchEvent(new CustomEvent('show-toast', {
                        detail: {
                            type: 'success',
                            message: 'Content has been reported successfully.'
                        }
                    }));
                } else if (this.type === 'delete') {
                    window.dispatchEvent(new CustomEvent('show-toast', {
                        detail: {
                            type: 'success',
                            message: 'Item has been deleted successfully.'
                        }
                    }));
                }

                this.close();
            }
        }));
    });

    // Helper function to open modal from anywhere in the application
    function openModal(config) {
        window.dispatchEvent(new CustomEvent('open-modal', {
            detail: config
        }));
    }
</script>

<style>
    [x-cloak] {
        display: none !important;
    }
</style>
