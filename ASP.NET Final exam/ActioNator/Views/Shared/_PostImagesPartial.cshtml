@using ActioNator.ViewModels.Community
@model IEnumerable<PostImageViewModel>

@if (Model != null && Model.Any())
{
    <div class="post-media-container bg-gray-200" x-data="postImagesHandler()" x-transition:enter="transition ease-out duration-300" x-transition:enter-start="opacity-0 transform scale-95" x-transition:enter-end="opacity-100 transform scale-100">
        <div class="dynamic-image-grid" :class="getGridClass()">
            <template x-for="(image, index) in displayedImages" :key="index">
                <div class="relative overflow-hidden bg-gray-200 cursor-pointer group" @@click ="openImageModal(index)" :class="getImageContainerClass(index)">
                    <img :src="image.url" :alt="image.alt || 'Post image'" class="w-full h-full object-cover transition-transform duration-200 group-hover:scale-105" @@error ="handleImageError($event, index)" onerror="this.onerror=null; this.src='/images/placeholder-image.png';">

                    <!-- Overlay for additional images (+N) -->
                    <template x-if="index === 2 && postImages.length > 3">
                        <div class="absolute inset-0 bg-black bg-opacity-60 flex items-center justify-center text-white font-bold text-xl transition-opacity duration-200 group-hover:bg-opacity-50">
                            <span x-text="'+' + (postImages.length - 3)"></span>
                        </div>
                    </template>

                    <!-- Loading placeholder -->
                    <div x-show="image.loading" class="absolute inset-0 bg-gray-300 animate-pulse flex items-center justify-center">
                        <svg class="w-8 h-8 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
                        </svg>
                    </div>
                </div>
            </template>
        </div>
    </div>
}

@* Initialize the postImages array with the model data *@
<script>
    document.addEventListener('alpine:init', () => {
        // Instead of redefining postCard, we extend it with image handling functionality
        Alpine.data('postImagesHandler', () => ({
            init() {
                // Initialize postImages from the server-side model if not already initialized
                if (!this.postImages) {
                    this.postImages = @Html.Raw(Json.Serialize(Model));
                }
                
                // Other initialization code...
                this.$nextTick(() => {
                    const gridElement = this.$el.querySelector('.dynamic-image-grid');
                    if (gridElement && this.postImages && this.postImages.length > 0) {
                        gridElement.style.opacity = '0';
                        gridElement.style.transform = 'scale(0.95)';

                        setTimeout(() => {
                            gridElement.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
                            gridElement.style.opacity = '1';
                            gridElement.style.transform = 'scale(1)';
                        }, 100);
                    }
                });
            }
        }));
    });
</script>
